function [] = test4(m,n_k)

% Get the geometric mean of C_{n-k}(f)
temp_prod = 1;
for i = 0:1:m
    for j = 0:1:n_k
        temp_prod = temp_prod ...
            .* ...
            (...
            nchoosek(i+j,i) ...
            .* nchoosek(m+n_k-i-j,m-i)...
            ./ nchoosek(m+n_k,m)...
            );
    end
end
GM_kth = temp_prod.^(1./( (m+1)*(n_k+1) ) );

% Get the geometric mean of C_{n-k-1}(f)
temp_prod = 1;
for i = 0:1:m
    for j = 0:1:n_k+1
        temp_prod = temp_prod ...
            .* ...
            (...
            nchoosek(i+j,i) ...
            .* nchoosek(m+n_k-i-j+1,m-i) ...
            ./ nchoosek(m+n_k+1,m)...
            );
    end
end
GM_k_minus_1th = temp_prod.^(1./(  (m+1)*(n_k+2) ) );

% Get geometric mean of the k-th Sylvester subresultant using the Geometric
% mean of the k-1 th subresultant.

Part_a = ...
    (...
        (m+n_k+1) ./ (n_k+1) ...
    )...
    .^( (n_k+2) ./ (n_k+1) );

Part_b = ...
    GM_k_minus_1th .^((n_k+2)./(n_k+1));
    
temp_prod = 1;
for i = 0:1:m
    temp_prod = temp_prod ...
        .* nchoosek(m+n_k,m) ./ (nchoosek(n_k+1+i,i)*nchoosek(m+n_k+1-i,m-i));
end
Part_c = temp_prod;

Part_c = Part_c .^ (1./ ((n_k+1) *(m+1)));


GM_test = Part_a * Part_b * Part_c;

end
